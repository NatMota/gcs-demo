'use client';

import React, { useState, useEffect } from 'react';
import { 
  Cloud, CheckCircle, AlertCircle, Settings, Database, ArrowRight, 
  Shield, Activity, Brain, Table, Sparkles, FileCode, Check,
  User, Calendar, Hash, Tag, Clock, MapPin, Link, TrendingUp,
  AlertTriangle, Info, ChevronRight, Loader2, Eye, Download,
  ThumbsUp, RefreshCw, Zap, BarChart3, Users, Play, Pause,
  RotateCcw, ChevronLeft, Square, Maximize2, Minimize2,
  Move, MousePointer, Hand, Plus, FileText, Circle, ArrowLeft,
  PlayCircle
} from 'lucide-react';

// Mock BigQuery tables data
const mockBigQueryTables = [
  {
    name: 'events_daily',
    dataset: 'analytics_123456789',
    description: 'Daily events from Google Analytics',
    lastModified: '2024-01-15',
    size: '2.3 GB',
    columns: [
      { name: 'user_pseudo_id', type: 'STRING', description: 'User identifier' },
      { name: 'event_timestamp', type: 'INTEGER', description: 'Event timestamp in microseconds' },
      { name: 'event_name', type: 'STRING', description: 'Name of the event' },
      { name: 'geo_country', type: 'STRING', description: 'Country code' },
      { name: 'device_category', type: 'STRING', description: 'Device category (desktop, mobile, tablet)' },
      { name: 'traffic_source_medium', type: 'STRING', description: 'Traffic source medium' },
      { name: 'user_id', type: 'STRING', description: 'User ID if set' },
      { name: 'session_id', type: 'STRING', description: 'Session identifier' }
    ]
  },
  {
    name: 'user_demographics',
    dataset: 'analytics_123456789', 
    description: 'User demographics and segments',
    lastModified: '2024-01-14',
    size: '450 MB',
    columns: [
      { name: 'user_id', type: 'STRING', description: 'User identifier' },
      { name: 'age_group', type: 'STRING', description: 'Age demographic group' },
      { name: 'gender', type: 'STRING', description: 'Gender demographic' },
      { name: 'interests', type: 'ARRAY<STRING>', description: 'User interests' },
      { name: 'location', type: 'STRING', description: 'Geographic location' }
    ]
  }
];

// Permutive standard fields
const permutiveFields = [
  { field: 'user_id', required: true, description: 'Unique identifier for users', icon: User },
  { field: 'timestamp', required: true, description: 'Event timestamp', icon: Calendar },
  { field: 'event_type', required: true, description: 'Type of event or action', icon: Tag },
  { field: 'segment_codes', required: false, description: 'Comma-separated segment codes', icon: Hash },
  { field: 'url', required: false, description: 'Page or content URL', icon: Link },
  { field: 'geo_info', required: false, description: 'Geographic information', icon: MapPin },
  { field: 'device_info', required: false, description: 'Device and browser details', icon: Database },
  { field: 'custom_properties', required: false, description: 'Additional properties', icon: Settings }
];

// GCS Regions (example based on common regions)
const gcsRegions = [
  { value: 'us-central1', label: 'US Central 1 (Iowa)' },
  { value: 'us-east1', label: 'US East 1 (South Carolina)' },
  { value: 'us-west1', label: 'US West 1 (Oregon)' },
  { value: 'europe-west1', label: 'Europe West 1 (Belgium)' },
  { value: 'europe-west2', label: 'Europe West 2 (London)' },
  { value: 'asia-east1', label: 'Asia East 1 (Taiwan)' }
];

// Mock GCP Projects and Buckets (simulating GCP API responses)
const mockGcpProjects = [
  {
    projectId: 'acme-analytics-prod',
    displayName: 'ACME Analytics Production',
    region: 'us-central1'
  },
  {
    projectId: 'acme-marketing-data',
    displayName: 'ACME Marketing Data',
    region: 'us-east1'
  },
  {
    projectId: 'acme-dev-sandbox',
    displayName: 'ACME Development Sandbox',
    region: 'us-west1'
  }
];

const mockGcpBuckets = [
  {
    name: 'acme-analytics-prod-data',
    projectId: 'acme-analytics-prod',
    region: 'us-central1',
    discoveredPrefixes: ['analytics/prod', 'analytics/staging', 'raw_data/events'],
    suggestedDataFormat: 'parquet',
    hasPartitions: true,
    connectionSuggestion: 'Production Analytics Data'
  },
  {
    name: 'acme-marketing-warehouse',
    projectId: 'acme-marketing-data', 
    region: 'us-east1',
    discoveredPrefixes: ['marketing/campaigns', 'marketing/attribution'],
    suggestedDataFormat: 'csv',
    hasPartitions: false,
    connectionSuggestion: 'Marketing Data Warehouse'
  },
  {
    name: 'acme-dev-experiments',
    projectId: 'acme-dev-sandbox',
    region: 'us-west1',
    discoveredPrefixes: ['experiments/ab_tests', 'experiments/feature_flags'],
    suggestedDataFormat: 'parquet',
    hasPartitions: true,
    connectionSuggestion: 'Development Experiments'
  }
];

// Mock GCS bucket structure discovery
const mockDiscoverBucketStructure = (config: any) => {
  return {
    bucketExists: true,
    schemaPrefix: config.schemaPrefix,
    discoveredTables: [
      {
        name: 'user_events',
        path: `gs://${config.bucketName}/${config.schemaPrefix}/user_events/`,
        fileCount: 342,
        dataFormat: 'parquet',
        isPartitioned: true,
        partitions: ['date=2025-01-01', 'date=2025-01-02'],
        sampleColumns: [
          { name: 'user_id', type: 'STRING', sample: 'usr_12345' },
          { name: 'event_timestamp', type: 'TIMESTAMP', sample: '2025-01-01 12:00:00' },
          { name: 'event_name', type: 'STRING', sample: 'page_view' },
          { name: 'page_url', type: 'STRING', sample: 'https://example.com/page' }
        ],
        sampleData: [
          {
            'user_id': 'usr_12345',
            'event_timestamp': '2025-01-01 12:00:00',
            'event_name': 'page_view',
            'page_url': 'https://example.com/homepage'
          },
          {
            'user_id': 'usr_67890',
            'event_timestamp': '2025-01-01 12:05:32',
            'event_name': 'click',
            'page_url': 'https://example.com/products'
          },
          {
            'user_id': 'usr_11111',
            'event_timestamp': '2025-01-01 12:10:15',
            'event_name': 'purchase',
            'page_url': 'https://example.com/checkout'
          },
          {
            'user_id': 'usr_22222',
            'event_timestamp': '2025-01-01 12:15:48',
            'event_name': 'page_view',
            'page_url': 'https://example.com/blog/article-1'
          },
          {
            'user_id': 'usr_33333',
            'event_timestamp': '2025-01-01 12:20:01',
            'event_name': 'scroll',
            'page_url': 'https://example.com/about'
          }
        ],
        totalRecords: 1247832,
        estimatedSize: '2.3GB',
        estimatedTime: 12
      },
      {
        name: 'user_profiles',
        path: `gs://${config.bucketName}/${config.schemaPrefix}/user_profiles/`,
        fileCount: 1,
        dataFormat: 'parquet',
        isPartitioned: false,
        partitions: [],
        sampleColumns: [
          { name: 'user_id', type: 'STRING', sample: 'usr_12345' },
          { name: 'age_group', type: 'STRING', sample: '25-34' },
          { name: 'interests', type: 'ARRAY<STRING>', sample: '["tech", "sports"]' },
          { name: 'location', type: 'STRING', sample: 'London, UK' }
        ],
        sampleData: [
          {
            'user_id': 'usr_12345',
            'age_group': '25-34',
            'interests': '["technology", "sports", "travel"]',
            'location': 'London, UK'
          },
          {
            'user_id': 'usr_67890',
            'age_group': '35-44',
            'interests': '["business", "fitness", "cooking"]',
            'location': 'Manchester, UK'
          },
          {
            'user_id': 'usr_11111',
            'age_group': '18-24',
            'interests': '["gaming", "music", "fashion"]',
            'location': 'Edinburgh, UK'
          },
          {
            'user_id': 'usr_22222',
            'age_group': '45-54',
            'interests': '["politics", "reading", "gardening"]',
            'location': 'Birmingham, UK'
          },
          {
            'user_id': 'usr_33333',
            'age_group': '25-34',
            'interests': '["art", "cinema", "coffee"]',
            'location': 'Brighton, UK'
          }
        ],
        totalRecords: 89423,
        estimatedSize: '145MB',
        estimatedTime: 3
      }
    ]
  };
};

export default function Home() {
  // Authentication state
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [passwordInput, setPasswordInput] = useState('');
  const [passwordError, setPasswordError] = useState(false);
  
  // Application state
  const [currentStep, setCurrentStep] = useState(0);
  const [maxStepReached, setMaxStepReached] = useState(0);
  const [selectedTable, setSelectedTable] = useState<any>(null);
  const [validationStatus, setValidationStatus] = useState<any>({});
  const [mcpSuggestions, setMcpSuggestions] = useState<any>({});
  const [isProcessing, setIsProcessing] = useState(false);
  const [showConfig, setShowConfig] = useState(false);
  const [ingestionStarted, setIngestionStarted] = useState(false);
  const [confidenceScore, setConfidenceScore] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [selectedDataSource, setSelectedDataSource] = useState<string | null>(null);
  const [selectedBucket, setSelectedBucket] = useState<string | null>(null);
  const [detectedSchema, setDetectedSchema] = useState<any>(null);
  const [wizardSubStep, setWizardSubStep] = useState(1);
  
  // GCS Configuration State
  const [gcsConfig, setGcsConfig] = useState({
    connectionName: '',
    gcpProjectId: '',
    bucketRegion: '',
    bucketName: '',
    schemaPrefix: '',
    dataFormat: 'parquet',
    dataPartitioning: 'all-partitioned'
  });
  const [iamStatus, setIamStatus] = useState<'unchecked' | 'checking' | 'valid' | 'invalid'>('unchecked');
  const [discoveredStructure, setDiscoveredStructure] = useState<any>(null);
  const [intelligenceMode, setIntelligenceMode] = useState(true);
  
  // Google Cloud Intelligence State
  const [gcpAccess, setGcpAccess] = useState<'none' | 'checking' | 'available'>('none');
  const [gcpProjects, setGcpProjects] = useState<any[]>([]);
  const [gcpBuckets, setGcpBuckets] = useState<any[]>([]);
  const [suggestedConfigs, setSuggestedConfigs] = useState<any[]>([]);
  const [columnMappings, setColumnMappings] = useState<any>({});
  const [mappingConfidence, setMappingConfidence] = useState<any>({});

  // Handle GCS configuration submission
  const handleGcsConfiguration = () => {
    setIsProcessing(true);
    setTimeout(() => {
      setIsProcessing(false);
      setCurrentStep(2); // Move to IAM verification
      setMaxStepReached(Math.max(maxStepReached, 2));
    }, 1500);
  };

  // Check IAM permissions
  const checkIamPermissions = () => {
    setIamStatus('checking');
    setTimeout(() => {
      // Simulate permission check
      setIamStatus('valid');
      // Don't auto-advance - let user click the button
    }, 2000);
  };

  // Check GCP access and suggest configurations
  const checkGcpAccess = () => {
    setGcpAccess('checking');
    setTimeout(() => {
      setGcpProjects(mockGcpProjects);
      setGcpBuckets(mockGcpBuckets);
      setGcpAccess('available');
      
      // Generate suggested configurations
      const suggestions = mockGcpBuckets.map(bucket => ({
        connectionName: bucket.connectionSuggestion,
        gcpProjectId: bucket.projectId,
        bucketRegion: bucket.region,
        bucketName: bucket.name,
        schemaPrefix: bucket.discoveredPrefixes[0],
        dataFormat: bucket.suggestedDataFormat,
        dataPartitioning: bucket.hasPartitions ? 'all-partitioned' : 'none-partitioned',
        confidence: Math.floor(Math.random() * 20) + 80 // 80-100%
      }));
      setSuggestedConfigs(suggestions);
    }, 1500);
  };

  // Auto-fill configuration from suggestion
  const applySuggestion = (suggestion: any) => {
    setGcsConfig(suggestion);
  };

  // Discover bucket structure
  const discoverBucketStructure = () => {
    setIsProcessing(true);
    setTimeout(() => {
      const structure = mockDiscoverBucketStructure(gcsConfig);
      setDiscoveredStructure(structure);
      setIsProcessing(false);
    }, 2000);
  };

  // Auto-check GCP access when step 1 is reached and intelligence is enabled
  useEffect(() => {
    if (currentStep === 1 && intelligenceMode && gcpAccess === 'none') {
      setTimeout(() => checkGcpAccess(), 500);
    }
  }, [currentStep, intelligenceMode, gcpAccess]);

  // Auto-discover bucket structure when step 3 is reached and structure is not discovered
  useEffect(() => {
    if (currentStep === 3 && !discoveredStructure && !isProcessing) {
      setTimeout(() => discoverBucketStructure(), 200);
    }
  }, [currentStep, discoveredStructure, isProcessing]);

  // Intelligent column mapping
  const generateColumnMappings = (table: any) => {
    const mappings: any = {};
    const confidence: any = {};
    
    // Smart mapping based on column names and types
    table.sampleColumns.forEach((column: any) => {
      const colName = column.name.toLowerCase();
      
      // High confidence mappings
      if (colName.includes('user_id') || colName === 'user_pseudo_id' || colName === 'userid') {
        mappings[column.name] = 'user_id';
        confidence[column.name] = 95;
      } else if (colName.includes('timestamp') || colName.includes('time') || colName === 'event_timestamp') {
        mappings[column.name] = 'timestamp';
        confidence[column.name] = 90;
      } else if (colName.includes('event') || colName === 'event_name') {
        mappings[column.name] = 'event_type';
        confidence[column.name] = 88;
      } else if (colName.includes('url') || colName.includes('page_url') || colName === 'page_location') {
        mappings[column.name] = 'url';
        confidence[column.name] = 85;
      }
      // Medium confidence mappings
      else if (colName.includes('geo') || colName.includes('country') || colName.includes('location')) {
        mappings[column.name] = 'geo_info';
        confidence[column.name] = 75;
      } else if (colName.includes('device') || colName.includes('browser') || colName.includes('platform')) {
        mappings[column.name] = 'device_info';
        confidence[column.name] = 70;
      } else if (colName.includes('segment') || colName.includes('audience')) {
        mappings[column.name] = 'segment_codes';
        confidence[column.name] = 65;
      } 
      // Default to custom properties for unmapped fields
      else {
        mappings[column.name] = 'custom_properties';
        confidence[column.name] = 40;
      }
    });
    
    return { mappings, confidence };
  };

  // Handle table selection
  const handleTableSelect = (table: any) => {
    setSelectedTable(table);
    
    // Generate intelligent mappings
    const { mappings, confidence } = generateColumnMappings(table);
    setColumnMappings(mappings);
    setMappingConfidence(confidence);
    
    setCurrentStep(4);
    setMaxStepReached(Math.max(maxStepReached, 4));
  };

  // Step navigation
  const goToStep = (step: number) => {
    if (step <= maxStepReached) {
      setCurrentStep(step);
      if (step === 0) {
        setWizardSubStep(1);
      }
    }
  };

  // Simple hash function for password (for demo purposes)
  const hashPassword = (password: string) => {
    let hash = 0;
    for (let i = 0; i < password.length; i++) {
      const char = password.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash;
    }
    return hash;
  };

  const handleLogin = (e: React.FormEvent) => {
    e.preventDefault();
    // Hash of "permutive" = -1917249821
    const correctPasswordHash = -1917249821;
    
    if (hashPassword(passwordInput) === correctPasswordHash) {
      setIsAuthenticated(true);
      setPasswordError(false);
    } else {
      setPasswordError(true);
      setPasswordInput('');
    }
  };

  // Show login screen if not authenticated
  if (!isAuthenticated) {
    return (
      <div className="h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-purple-50">
        <div className="w-full max-w-md">
          <div className="bg-white rounded-2xl shadow-2xl p-8">
            {/* Logo */}
            <div className="flex justify-center mb-8">
              <div className="flex items-center space-x-3">
                <div className="w-12 h-12 bg-gradient-to-br from-purple-600 to-blue-600 rounded-lg"></div>
                <div>
                  <h1 className="text-2xl font-bold text-gray-900">Permutive</h1>
                  <p className="text-xs text-gray-500">Data Connectivity Demo</p>
                </div>
              </div>
            </div>

            {/* Login Form */}
            <form onSubmit={handleLogin} className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Access Password
                </label>
                <input
                  type="password"
                  value={passwordInput}
                  onChange={(e) => {
                    setPasswordInput(e.target.value);
                    setPasswordError(false);
                  }}
                  placeholder="Enter password"
                  className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 transition-colors ${
                    passwordError 
                      ? 'border-red-300 focus:ring-red-500 focus:border-red-500' 
                      : 'border-gray-300 focus:ring-purple-500 focus:border-purple-500'
                  }`}
                  autoFocus
                />
                {passwordError && (
                  <p className="mt-2 text-sm text-red-600 flex items-center">
                    <AlertCircle className="h-4 w-4 mr-1" />
                    Incorrect password. Please try again.
                  </p>
                )}
              </div>

              <button
                type="submit"
                className="w-full py-3 px-4 bg-gradient-to-r from-purple-600 to-blue-600 text-white font-medium rounded-lg hover:from-purple-700 hover:to-blue-700 transition-all transform hover:scale-[1.02] focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2"
              >
                Access Demo
              </button>
            </form>

            {/* Footer */}
            <div className="mt-8 pt-6 border-t border-gray-200">
              <p className="text-xs text-center text-gray-500">
                Protected demonstration environment
              </p>
              <p className="text-xs text-center text-gray-400 mt-1">
                Hint: The password is the company name in lowercase
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="h-screen flex flex-col bg-gray-800 overflow-hidden">
      {/* Simple Header */}
      <header className="bg-gray-900 border-b border-gray-700 h-12 flex items-center justify-between px-4">
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-2">
            <Square className="h-4 w-4 text-gray-400" />
            <span className="text-sm font-medium text-gray-200">Permutive GCS Integration</span>
          </div>
        </div>

        {/* Step Navigation */}
        <div className="flex items-center space-x-1">
          {[
            { num: 0, label: 'Connect', icon: Database },
            { num: 1, label: 'Auth', icon: Shield },
            { num: 2, label: 'Select', icon: Table },
            { num: 3, label: 'Map', icon: Brain },
            { num: 4, label: 'Review', icon: Eye },
            { num: 5, label: 'Ingest', icon: TrendingUp }
          ].map((step) => {
            const Icon = step.icon;
            return (
              <div key={step.num} className="flex flex-col items-center">
                <button
                  onClick={() => goToStep(step.num)}
                  className={`w-8 h-8 rounded flex items-center justify-center text-xs transition-all ${
                    currentStep === step.num
                      ? 'bg-blue-600 text-white'
                      : step.num <= maxStepReached
                      ? 'bg-gray-700 text-gray-300 hover:bg-gray-600 cursor-pointer'
                      : 'bg-gray-800 text-gray-500 cursor-not-allowed'
                  }`}
                  disabled={step.num > maxStepReached}
                >
                  <Icon className="h-4 w-4" />
                </button>
                <span className="text-xs text-gray-400 mt-1">{step.label}</span>
              </div>
            );
          })}
        </div>

        {/* Empty space for balance */}
        <div className="w-16"></div>
      </header>

      {/* Canvas Background */}
      <div className="flex-1 bg-gray-100 p-6 overflow-auto">
        {/* Board/Frame */}
        <div className="bg-white rounded-lg shadow-xl border border-gray-300 overflow-hidden min-h-full">
          {/* Board Header */}
          <div className="bg-gray-50 border-b border-gray-200 px-4 py-2">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <div className="w-3 h-3 bg-red-400 rounded-full"></div>
                <div className="w-3 h-3 bg-yellow-400 rounded-full"></div>
                <div className="w-3 h-3 bg-green-400 rounded-full"></div>
              </div>
              <span className="text-xs text-gray-500 font-medium">Permutive Integration Flow</span>
              <div className="w-16"></div>
            </div>
          </div>

          {/* Board Content Area */}
          <div className="h-full">
            {/* Step 0: Connectivity - Connections List */}
            {currentStep === 0 && (
              <div className="h-full bg-gray-50">
                {wizardSubStep === 1 && (
                  <div className="h-full bg-gray-50">
                    {/* Header */}
                    <div className="bg-white border-b border-gray-200">
                      <div className="px-6 py-4">
                        <h1 className="text-2xl font-bold text-gray-900">Connectivity</h1>
                        <p className="text-sm text-gray-600 mt-1">Connect to Partners for Data Collaboration</p>
                      </div>
                      
                      {/* Tabs */}
                      <div className="px-6">
                        <div className="flex items-center space-x-8 border-b border-gray-200">
                          <button className="relative py-3 text-sm font-medium text-blue-600 border-b-2 border-blue-600 -mb-px">
                            Catalog
                          </button>
                          <button className="py-3 text-sm font-medium text-gray-500 hover:text-gray-700">
                            Connections
                          </button>
                          <button className="py-3 text-sm font-medium text-gray-500 hover:text-gray-700">
                            Imports
                          </button>
                        </div>
                      </div>
                    </div>

                    {/* Search and Filter Bar */}
                    <div className="bg-white border-b border-gray-200 px-6 py-4">
                      <div className="flex items-center space-x-3">
                        <div className="flex-1 relative">
                          <input
                            type="text"
                            placeholder="Search"
                            className="w-full px-4 py-2 pl-10 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                          />
                          <svg className="absolute left-3 top-2.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                          </svg>
                        </div>
                        <button className="px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 hover:bg-gray-50 flex items-center space-x-2">
                          <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4" />
                          </svg>
                          <span>Filter</span>
                        </button>
                      </div>
                    </div>

                    {/* Integration Cards Grid */}
                    <div className="p-6">
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {/* Amazon S3 Card */}
                        <div className="bg-white rounded-lg border border-gray-200 p-4 hover:shadow-md transition-shadow">
                          <div className="relative">
                            <span className="absolute top-0 right-0 px-2 py-1 bg-green-100 text-green-700 text-xs font-medium rounded">Internal</span>
                            <div className="flex items-start space-x-4">
                              <div className="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center flex-shrink-0">
                                <svg className="w-8 h-8 text-orange-600" viewBox="0 0 24 24" fill="currentColor">
                                  <path d="M12 2L2 7v10c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V7l-10-5z"/>
                                </svg>
                              </div>
                              <div className="flex-1 min-w-0">
                                <h3 className="text-base font-medium text-gray-900">Amazon S3</h3>
                                <p className="text-sm text-gray-500 mt-1">Data Lake</p>
                              </div>
                            </div>
                            <button 
                              onClick={() => setWizardSubStep(2)}
                              className="mt-4 w-full py-2 border border-blue-600 text-blue-600 rounded-lg text-sm font-medium hover:bg-blue-50 transition-colors"
                            >
                              Connect
                            </button>
                          </div>
                        </div>

                        {/* Databricks Card */}
                        <div className="bg-white rounded-lg border border-gray-200 p-4 hover:shadow-md transition-shadow">
                          <div className="flex items-start space-x-4">
                            <div className="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center flex-shrink-0">
                              <svg className="w-8 h-8 text-red-600" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>
                              </svg>
                            </div>
                            <div className="flex-1 min-w-0">
                              <h3 className="text-base font-medium text-gray-900">Databricks</h3>
                              <p className="text-sm text-gray-500 mt-1">Data Warehouse</p>
                            </div>
                          </div>
                          <button className="mt-4 w-full py-2 border border-blue-600 text-blue-600 rounded-lg text-sm font-medium hover:bg-blue-50 transition-colors">
                            Connect
                          </button>
                        </div>

                        {/* Google BigQuery Card */}
                        <div className="bg-white rounded-lg border border-gray-200 p-4 hover:shadow-md transition-shadow">
                          <div className="flex items-start space-x-4">
                            <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">
                              <Database className="w-7 h-7 text-blue-600" />
                            </div>
                            <div className="flex-1 min-w-0">
                              <h3 className="text-base font-medium text-gray-900">Google BigQuery</h3>
                              <p className="text-sm text-gray-500 mt-1">Data Warehouse</p>
                            </div>
                          </div>
                          <button className="mt-4 w-full py-2 border border-blue-600 text-blue-600 rounded-lg text-sm font-medium hover:bg-blue-50 transition-colors">
                            Connect
                          </button>
                        </div>

                        {/* Google Cloud Storage Card */}
                        <div className="bg-white rounded-lg border border-gray-200 p-4 hover:shadow-md transition-shadow">
                          <div className="relative">
                            <span className="absolute top-0 right-0 px-2 py-1 bg-green-100 text-green-700 text-xs font-medium rounded">Internal</span>
                            <div className="flex items-start space-x-4">
                              <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">
                                <Cloud className="w-7 h-7 text-blue-600" />
                              </div>
                              <div className="flex-1 min-w-0">
                                <h3 className="text-base font-medium text-gray-900">Google Cloud Storage</h3>
                                <p className="text-sm text-gray-500 mt-1">Data Lake</p>
                              </div>
                            </div>
                            <button 
                              onClick={() => {
                                setSelectedDataSource('gcs');
                                setCurrentStep(1);
                                setMaxStepReached(Math.max(maxStepReached, 1));
                              }}
                              className="mt-4 w-full py-2 border border-blue-600 text-blue-600 rounded-lg text-sm font-medium hover:bg-blue-50 transition-colors"
                            >
                              Connect
                            </button>
                          </div>
                        </div>

                        {/* Snowflake Card */}
                        <div className="bg-white rounded-lg border border-gray-200 p-4 hover:shadow-md transition-shadow">
                          <div className="flex items-start space-x-4">
                            <div className="w-12 h-12 bg-cyan-100 rounded-lg flex items-center justify-center flex-shrink-0">
                              <svg className="w-8 h-8 text-cyan-600" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
                              </svg>
                            </div>
                            <div className="flex-1 min-w-0">
                              <h3 className="text-base font-medium text-gray-900">Snowflake</h3>
                              <p className="text-sm text-gray-500 mt-1">Data Warehouse</p>
                            </div>
                          </div>
                          <button className="mt-4 w-full py-2 border border-blue-600 text-blue-600 rounded-lg text-sm font-medium hover:bg-blue-50 transition-colors">
                            Connect
                          </button>
                        </div>

                        {/* AI Wizard Card - Special */}
                        <div className="bg-white rounded-lg border-2 border-purple-300 p-4 hover:shadow-lg transition-shadow relative overflow-hidden">
                          <div className="absolute top-0 right-0 px-2 py-1 bg-gradient-to-r from-purple-600 to-pink-600 text-white text-xs font-medium rounded-bl">
                            NEW
                          </div>
                          <div className="flex items-start space-x-4">
                            <div className="w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg flex items-center justify-center flex-shrink-0 shadow-md">
                              <Sparkles className="w-7 h-7 text-white" />
                            </div>
                            <div className="flex-1 min-w-0">
                              <h3 className="text-base font-medium text-gray-900">AI Wizard</h3>
                              <p className="text-sm text-gray-500 mt-1">Intelligent Setup</p>
                            </div>
                          </div>
                          <p className="text-xs text-purple-600 mt-2">Auto-detect and configure in seconds</p>
                          <button 
                            onClick={() => {
                              setSelectedDataSource('ai-wizard');
                              setCurrentStep(1);
                              setMaxStepReached(Math.max(maxStepReached, 1));
                            }}
                            className="mt-4 w-full py-2 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg text-sm font-medium hover:shadow-md transition-all"
                          >
                            Quick Setup
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                
                {/* Available Catalogs View */}
                {wizardSubStep === 2 && (
                  <div className="h-full bg-gray-50">
                    <div className="bg-white border-b border-gray-200 px-6 py-4">
                      <div className="max-w-7xl mx-auto">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center space-x-4">
                            <button 
                              onClick={() => setWizardSubStep(1)}
                              className="flex items-center text-sm text-gray-600 hover:text-gray-900 transition-colors"
                            >
                              <ArrowLeft className="h-4 w-4 mr-2" />
                              Back to Connections
                            </button>
                            <div className="w-px h-6 bg-gray-300"></div>
                            <div>
                              <h1 className="text-2xl font-bold text-gray-900">New Connection</h1>
                              <p className="text-gray-600 mt-1">Choose your data source type</p>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    <div className="max-w-7xl mx-auto px-6 py-8">
                      {/* Categories */}
                      <div className="mb-8">
                        <div className="flex items-center space-x-6">
                          <div className="flex items-center space-x-2 text-sm text-green-600 font-medium">
                            <CheckCircle className="h-4 w-4" />
                            <span>Cloud Storage</span>
                          </div>
                          <div className="flex items-center space-x-2 text-sm text-blue-600 font-medium">
                            <Sparkles className="h-4 w-4" />
                            <span>AI Powered</span>
                          </div>
                          <div className="flex items-center space-x-2 text-sm text-gray-400">
                            <Circle className="h-4 w-4" />
                            <span>More Coming Soon</span>
                          </div>
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {/* AI Wizard Card - Featured */}
                        <div className="md:col-span-2 lg:col-span-1">
                          <button
                            onClick={() => {
                              setSelectedDataSource('ai-wizard');
                              setCurrentStep(1);
                              setMaxStepReached(Math.max(maxStepReached, 1));
                            }}
                            className="w-full bg-gradient-to-br from-purple-50 to-indigo-50 rounded-xl border-2 border-purple-200 p-6 hover:border-purple-300 hover:shadow-lg transition-all text-left relative overflow-hidden group"
                          >
                            <div className="absolute top-4 right-4">
                              <span className="px-2.5 py-1 bg-gradient-to-r from-purple-600 to-indigo-600 text-white text-xs font-medium rounded-full">
                                ✨ AI Powered
                              </span>
                            </div>
                            
                            <div className="mb-4">
                              <div className="w-12 h-12 bg-gradient-to-br from-purple-100 to-indigo-100 rounded-xl flex items-center justify-center group-hover:from-purple-200 group-hover:to-indigo-200 transition-colors">
                                <Sparkles className="h-7 w-7 text-purple-600" />
                              </div>
                            </div>
                            
                            <h3 className="text-lg font-bold text-gray-900 mb-2">AI Setup Wizard</h3>
                            <p className="text-sm text-gray-600 mb-4 leading-relaxed">
                              Let AI automatically detect, configure, and optimize your GCS connection with intelligent field mapping.
                            </p>
                            
                            <div className="space-y-2 mb-4">
                              <div className="flex items-center text-xs text-purple-700">
                                <CheckCircle className="h-3 w-3 mr-2" />
                                <span>Auto-bucket detection</span>
                              </div>
                              <div className="flex items-center text-xs text-purple-700">
                                <CheckCircle className="h-3 w-3 mr-2" />
                                <span>Smart field mapping</span>
                              </div>
                              <div className="flex items-center text-xs text-purple-700">
                                <CheckCircle className="h-3 w-3 mr-2" />
                                <span>Instant setup</span>
                              </div>
                            </div>
                            
                            <div className="text-xs font-semibold text-purple-600 bg-purple-100 px-3 py-1 rounded-full inline-block">
                              Recommended for first-time users
                            </div>
                          </button>
                        </div>

                        {/* Google Cloud Storage Card */}
                        <div>
                          <button
                            onClick={() => {
                              setSelectedDataSource('gcs');
                              setCurrentStep(1);
                              setMaxStepReached(Math.max(maxStepReached, 1));
                            }}
                            className="w-full bg-white rounded-xl border-2 border-blue-200 p-6 hover:border-blue-300 hover:shadow-lg transition-all text-left relative overflow-hidden group"
                          >
                            <div className="absolute top-4 right-4">
                              <span className="px-2.5 py-1 bg-blue-100 text-blue-700 text-xs font-medium rounded-full">
                                Most Popular
                              </span>
                            </div>
                            
                            <div className="mb-4">
                              <div className="w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center group-hover:bg-blue-200 transition-colors">
                                <Cloud className="h-7 w-7 text-blue-600" />
                              </div>
                            </div>
                            
                            <h3 className="text-lg font-bold text-gray-900 mb-2">Google Cloud Storage</h3>
                            <p className="text-sm text-gray-600 mb-4 leading-relaxed">
                              Manual configuration for experienced users who want full control over their GCS setup.
                            </p>
                            
                            <div className="flex flex-wrap gap-1.5 mb-4">
                              <span className="text-xs px-2 py-1 bg-gray-100 text-gray-700 rounded-md">CSV</span>
                              <span className="text-xs px-2 py-1 bg-gray-100 text-gray-700 rounded-md">Parquet</span>
                              <span className="text-xs px-2 py-1 bg-gray-100 text-gray-700 rounded-md">JSON</span>
                              <span className="text-xs px-2 py-1 bg-gray-100 text-gray-700 rounded-md">Avro</span>
                            </div>
                            
                            <div className="text-xs text-gray-500">
                              Full customization available
                            </div>
                          </button>
                        </div>

                        {/* BigQuery - Coming Soon */}
                        <div>
                          <div className="w-full bg-white rounded-xl border-2 border-gray-200 p-6 opacity-50 cursor-not-allowed relative overflow-hidden">
                            <div className="absolute top-4 right-4">
                              <span className="px-2.5 py-1 bg-gray-100 text-gray-600 text-xs font-medium rounded-full">
                                Coming Soon
                              </span>
                            </div>
                            
                            <div className="mb-4">
                              <div className="w-12 h-12 bg-gray-100 rounded-xl flex items-center justify-center">
                                <Database className="h-7 w-7 text-gray-400" />
                              </div>
                            </div>
                            
                            <h3 className="text-lg font-bold text-gray-500 mb-2">Google BigQuery</h3>
                            <p className="text-sm text-gray-400 mb-4 leading-relaxed">
                              Direct connection to BigQuery datasets with automatic table discovery.
                            </p>
                            
                            <div className="flex flex-wrap gap-1.5 mb-4">
                              <span className="text-xs px-2 py-1 bg-gray-50 text-gray-400 rounded-md">SQL</span>
                              <span className="text-xs px-2 py-1 bg-gray-50 text-gray-400 rounded-md">Analytics</span>
                              <span className="text-xs px-2 py-1 bg-gray-50 text-gray-400 rounded-md">Streaming</span>
                            </div>
                            
                            <div className="text-xs text-gray-400">
                              Advanced analytics ready
                            </div>
                          </div>
                        </div>
                      </div>

                      {/* Additional Coming Soon Cards */}
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-6">
                        <div className="bg-white rounded-xl border border-gray-200 p-6 opacity-50">
                          <div className="flex items-center justify-between mb-4">
                            <div className="w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center">
                              <FileText className="h-6 w-6 text-orange-500" />
                            </div>
                            <span className="text-xs text-gray-500">Coming Soon</span>
                          </div>
                          <h4 className="font-medium text-gray-500 mb-1">Amazon S3</h4>
                          <p className="text-xs text-gray-400">AWS object storage</p>
                        </div>

                        <div className="bg-white rounded-xl border border-gray-200 p-6 opacity-50">
                          <div className="flex items-center justify-between mb-4">
                            <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                              <Database className="h-6 w-6 text-blue-500" />
                            </div>
                            <span className="text-xs text-gray-500">Coming Soon</span>
                          </div>
                          <h4 className="font-medium text-gray-500 mb-1">Snowflake</h4>
                          <p className="text-xs text-gray-400">Cloud data warehouse</p>
                        </div>

                        <div className="bg-white rounded-xl border border-gray-200 p-6 opacity-50">
                          <div className="flex items-center justify-between mb-4">
                            <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                              <Activity className="h-6 w-6 text-purple-500" />
                            </div>
                            <span className="text-xs text-gray-500">Coming Soon</span>
                          </div>
                          <h4 className="font-medium text-gray-500 mb-1">Databricks</h4>
                          <p className="text-xs text-gray-400">Unified analytics platform</p>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}

            {/* Step 1: GCS Bucket Configuration */}
            {currentStep === 1 && (
              <div className="h-full p-8 overflow-y-auto">
                <div className="max-w-3xl mx-auto">
                  <div className="mb-8">
                    <h2 className="text-2xl font-bold text-gray-900 mb-2">Configure GCS Connection</h2>
                    <p className="text-gray-600">Enter your Google Cloud Storage bucket details following Permutive's structure requirements</p>
                  </div>

                  <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-8">
                    {/* Intelligence Mode Toggle */}
                    <div className="mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <Brain className="h-5 w-5 text-blue-600" />
                          <div>
                            <h3 className="font-medium text-blue-900">Intelligent Assistance</h3>
                            <p className="text-sm text-blue-700">
                              {gcpAccess === 'available' && 'Smart suggestions from your GCP account'}
                              {gcpAccess === 'checking' && 'Scanning your GCP resources...'}
                              {gcpAccess === 'none' && 'Get smart suggestions and validation'}
                            </p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          {gcpAccess === 'checking' && <Loader2 className="animate-spin h-4 w-4 text-blue-600" />}
                          {gcpAccess === 'available' && <CheckCircle className="h-4 w-4 text-green-600" />}
                          <button
                            onClick={() => setIntelligenceMode(!intelligenceMode)}
                            className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${
                              intelligenceMode 
                                ? 'bg-blue-600 text-white' 
                                : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                            }`}
                          >
                            {intelligenceMode ? 'Enabled' : 'Manual'}
                          </button>
                        </div>
                      </div>
                    </div>

                    {/* Intelligent Suggestions */}
                    {intelligenceMode && gcpAccess === 'available' && suggestedConfigs.length > 0 && (
                      <div className="mb-6 p-4 bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg border border-purple-200">
                        <div className="flex items-center space-x-2 mb-3">
                          <Sparkles className="h-5 w-5 text-purple-600" />
                          <h3 className="font-medium text-purple-900">Suggested Configurations</h3>
                          <span className="text-xs text-purple-700 bg-purple-100 px-2 py-1 rounded-full">
                            Found {suggestedConfigs.length} options
                          </span>
                        </div>
                        <div className="space-y-2 max-h-48 overflow-y-auto">
                          {suggestedConfigs.map((suggestion, index) => (
                            <div
                              key={index}
                              className="bg-white rounded-lg p-3 border border-purple-200 hover:border-purple-400 cursor-pointer transition-colors"
                              onClick={() => applySuggestion(suggestion)}
                            >
                              <div className="flex items-center justify-between">
                                <div className="flex-1">
                                  <div className="flex items-center space-x-2">
                                    <h4 className="font-medium text-gray-900 text-sm">{suggestion.connectionName}</h4>
                                    <span className="text-xs text-green-600 bg-green-100 px-2 py-0.5 rounded-full">
                                      {suggestion.confidence}% match
                                    </span>
                                  </div>
                                  <div className="text-xs text-gray-600 mt-1">
                                    {suggestion.gcpProjectId} / {suggestion.bucketName} / {suggestion.schemaPrefix}
                                  </div>
                                </div>
                                <ArrowRight className="h-4 w-4 text-purple-400" />
                              </div>
                            </div>
                          ))}
                        </div>
                        <p className="text-xs text-purple-700 mt-3">
                          Click any suggestion to auto-fill the form, or continue manually below
                        </p>
                      </div>
                    )}

                    <form onSubmit={(e) => { e.preventDefault(); handleGcsConfiguration(); }} className="space-y-6">
                      {/* Connection Name */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Connection Name *
                        </label>
                        <input
                          type="text"
                          value={gcsConfig.connectionName}
                          onChange={(e) => setGcsConfig({...gcsConfig, connectionName: e.target.value})}
                          placeholder="e.g., Production Analytics Data"
                          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          required
                        />
                        <p className="mt-1 text-sm text-gray-500">Friendly name for this connection in Permutive</p>
                      </div>

                      {/* GCP Project ID */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          GCP Project ID *
                        </label>
                        {intelligenceMode && gcpAccess === 'available' && gcpProjects.length > 0 ? (
                          <select
                            value={gcsConfig.gcpProjectId}
                            onChange={(e) => {
                              const selectedProject = gcpProjects.find(p => p.projectId === e.target.value);
                              setGcsConfig({
                                ...gcsConfig, 
                                gcpProjectId: e.target.value,
                                bucketRegion: selectedProject?.region || gcsConfig.bucketRegion
                              });
                            }}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            required
                          >
                            <option value="">Select project...</option>
                            {gcpProjects.map(project => (
                              <option key={project.projectId} value={project.projectId}>
                                {project.displayName} ({project.projectId})
                              </option>
                            ))}
                          </select>
                        ) : (
                          <input
                            type="text"
                            value={gcsConfig.gcpProjectId}
                            onChange={(e) => setGcsConfig({...gcsConfig, gcpProjectId: e.target.value})}
                            placeholder="my-project-id"
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            required
                          />
                        )}
                        <p className="mt-1 text-sm text-gray-500">
                          {intelligenceMode && gcpAccess === 'available' 
                            ? `Found ${gcpProjects.length} projects in your GCP account`
                            : 'The GCP project that contains your bucket'
                          }
                        </p>
                      </div>

                      <div className="grid grid-cols-2 gap-6">
                        {/* Bucket Region */}
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            GCS Bucket Region *
                          </label>
                          <select
                            value={gcsConfig.bucketRegion}
                            onChange={(e) => setGcsConfig({...gcsConfig, bucketRegion: e.target.value})}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            required
                          >
                            <option value="">Select region...</option>
                            {gcsRegions.map(region => (
                              <option key={region.value} value={region.value}>{region.label}</option>
                            ))}
                          </select>
                        </div>

                        {/* Bucket Name */}
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            GCS Bucket Name *
                          </label>
                          {intelligenceMode && gcpAccess === 'available' && gcsConfig.gcpProjectId ? (
                            <div className="relative">
                              <input
                                type="text"
                                value={gcsConfig.bucketName}
                                onChange={(e) => setGcsConfig({...gcsConfig, bucketName: e.target.value})}
                                placeholder="my-analytics-bucket"
                                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                required
                                list="bucket-suggestions"
                              />
                              <datalist id="bucket-suggestions">
                                {gcpBuckets
                                  .filter(bucket => bucket.projectId === gcsConfig.gcpProjectId)
                                  .map(bucket => (
                                    <option key={bucket.name} value={bucket.name} />
                                  ))
                                }
                              </datalist>
                              {gcpBuckets.filter(bucket => bucket.projectId === gcsConfig.gcpProjectId).length > 0 && (
                                <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                                  <Sparkles className="h-4 w-4 text-purple-400" />
                                </div>
                              )}
                            </div>
                          ) : (
                            <input
                              type="text"
                              value={gcsConfig.bucketName}
                              onChange={(e) => setGcsConfig({...gcsConfig, bucketName: e.target.value})}
                              placeholder="my-analytics-bucket"
                              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                              required
                            />
                          )}
                          {intelligenceMode && gcpAccess === 'available' && gcsConfig.gcpProjectId && (
                            <p className="mt-1 text-sm text-purple-600">
                              ✨ {gcpBuckets.filter(bucket => bucket.projectId === gcsConfig.gcpProjectId).length} buckets available in this project
                            </p>
                          )}
                        </div>
                      </div>

                      {/* Schema Prefix */}
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          Schema Prefix *
                        </label>
                        {intelligenceMode && gcpAccess === 'available' && gcsConfig.bucketName ? (
                          <div className="relative">
                            <input
                              type="text"
                              value={gcsConfig.schemaPrefix}
                              onChange={(e) => setGcsConfig({...gcsConfig, schemaPrefix: e.target.value})}
                              placeholder="analytics/prod"
                              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                              required
                              list="prefix-suggestions"
                            />
                            <datalist id="prefix-suggestions">
                              {gcpBuckets
                                .filter(bucket => bucket.name === gcsConfig.bucketName)
                                .flatMap(bucket => bucket.discoveredPrefixes)
                                .map(prefix => (
                                  <option key={prefix} value={prefix} />
                                ))
                              }
                            </datalist>
                            {gcpBuckets.some(bucket => bucket.name === gcsConfig.bucketName) && (
                              <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                                <Sparkles className="h-4 w-4 text-purple-400" />
                              </div>
                            )}
                          </div>
                        ) : (
                          <input
                            type="text"
                            value={gcsConfig.schemaPrefix}
                            onChange={(e) => setGcsConfig({...gcsConfig, schemaPrefix: e.target.value})}
                            placeholder="analytics/prod"
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            required
                          />
                        )}
                        <p className="mt-1 text-sm text-gray-500">
                          Prefix within bucket representing a schema (no leading slash)
                        </p>
                        {intelligenceMode && gcpAccess === 'available' && gcsConfig.bucketName && 
                         gcpBuckets.some(bucket => bucket.name === gcsConfig.bucketName) && (
                          <div className="mt-2 p-2 bg-purple-50 rounded text-sm text-purple-700 border border-purple-200">
                            <strong>✨ AI detected prefixes:</strong>{' '}
                            {gcpBuckets
                              .filter(bucket => bucket.name === gcsConfig.bucketName)
                              .flatMap(bucket => bucket.discoveredPrefixes)
                              .map(prefix => (
                                <button
                                  key={prefix}
                                  type="button"
                                  onClick={() => setGcsConfig({...gcsConfig, schemaPrefix: prefix})}
                                  className="ml-2 px-2 py-0.5 bg-purple-100 hover:bg-purple-200 rounded text-xs"
                                >
                                  {prefix}
                                </button>
                              ))
                            }
                          </div>
                        )}
                        {intelligenceMode && gcsConfig.bucketName && gcsConfig.schemaPrefix && (
                          <div className="mt-2 p-2 bg-gray-50 rounded text-sm text-gray-600">
                            <strong>Structure preview:</strong> gs://{gcsConfig.bucketName}/{gcsConfig.schemaPrefix}/table_name/
                          </div>
                        )}
                      </div>

                      <div className="grid grid-cols-2 gap-6">
                        {/* Data Format */}
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Data Format *
                          </label>
                          <select
                            value={gcsConfig.dataFormat}
                            onChange={(e) => setGcsConfig({...gcsConfig, dataFormat: e.target.value})}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          >
                            <option value="parquet">Parquet (Recommended)</option>
                            <option value="csv">CSV</option>
                          </select>
                          {gcsConfig.dataFormat === 'parquet' && (
                            <p className="mt-1 text-sm text-green-600">✓ Recommended for better performance</p>
                          )}
                        </div>

                        {/* Data Partitioning */}
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            Data Partitioning *
                          </label>
                          <select
                            value={gcsConfig.dataPartitioning}
                            onChange={(e) => setGcsConfig({...gcsConfig, dataPartitioning: e.target.value})}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          >
                            <option value="all-partitioned">All tables are partitioned</option>
                            <option value="none-partitioned">No tables are partitioned</option>
                          </select>
                        </div>
                      </div>

                      {/* Documentation Reference */}
                      <div className="p-4 bg-gray-50 rounded-lg border border-gray-200">
                        <div className="flex items-start space-x-3">
                          <Info className="h-5 w-5 text-blue-500 mt-0.5" />
                          <div className="text-sm text-gray-700">
                            <p className="font-medium mb-1">Structure Requirements</p>
                            <p>Your bucket should follow this structure: <code className="bg-gray-200 px-1 rounded">gs://bucket/schema_prefix/table_name/files</code></p>
                            <p className="mt-1">Each subdirectory under the schema prefix represents a table.</p>
                          </div>
                        </div>
                      </div>

                      {/* Submit Button */}
                      <div className="flex justify-end pt-6">
                        <button
                          type="submit"
                          disabled={isProcessing || !gcsConfig.connectionName || !gcsConfig.bucketName || !gcsConfig.schemaPrefix}
                          className="px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
                        >
                          {isProcessing ? (
                            <>
                              <Loader2 className="animate-spin h-4 w-4" />
                              <span>Validating...</span>
                            </>
                          ) : (
                            <>
                              <span>Continue to Permissions</span>
                              <ArrowRight className="h-4 w-4" />
                            </>
                          )}
                        </button>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            )}

            {/* Step 2: IAM Permissions Verification */}
            {currentStep === 2 && (
              <div className="h-full flex items-center justify-center p-8">
                <div className="max-w-2xl mx-auto">
                  <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-8">
                    <div className="text-center mb-8">
                      <div className="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <Shield className="h-8 w-8 text-orange-600" />
                      </div>
                      <h2 className="text-2xl font-bold text-gray-900 mb-2">Verify IAM Permissions</h2>
                      <p className="text-gray-600">
                        Checking access permissions for your GCS bucket: <strong>{gcsConfig.bucketName}</strong>
                      </p>
                    </div>

                    {/* Configuration Summary */}
                    <div className="mb-8 p-4 bg-gray-50 rounded-lg">
                      <h3 className="font-semibold text-gray-900 mb-3">Connection Configuration</h3>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-600">Project:</span>
                          <span className="font-medium">{gcsConfig.gcpProjectId}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Bucket:</span>
                          <span className="font-medium">{gcsConfig.bucketName}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Region:</span>
                          <span className="font-medium">{gcsConfig.bucketRegion}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">Schema Prefix:</span>
                          <span className="font-medium">{gcsConfig.schemaPrefix}</span>
                        </div>
                      </div>
                    </div>

                    {/* IAM Permission Requirements */}
                    <div className="mb-8">
                      <h3 className="font-semibold text-gray-900 mb-4">Required Permissions</h3>
                      <div className="space-y-3">
                        <div className="flex items-center space-x-3 p-3 bg-blue-50 rounded-lg">
                          <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
                            <User className="h-4 w-4 text-white" />
                          </div>
                          <div className="flex-1">
                            <p className="font-medium text-gray-900">Permutive Service Account</p>
                            <p className="text-sm text-gray-600">connection@permutive.com</p>
                          </div>
                        </div>

                        <div className="space-y-2 ml-11">
                          <div className="flex items-center space-x-2 text-sm">
                            <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                            <code className="bg-gray-100 px-2 py-1 rounded text-xs">roles/storage.objectViewer</code>
                            <span className="text-gray-600">- Read objects in bucket</span>
                          </div>
                          <div className="flex items-center space-x-2 text-sm">
                            <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                            <code className="bg-gray-100 px-2 py-1 rounded text-xs">roles/storage.bucketViewer</code>
                            <span className="text-gray-600">- List bucket contents</span>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Permission Status */}
                    {iamStatus === 'unchecked' && (
                      <div className="text-center">
                        <button
                          onClick={checkIamPermissions}
                          className="px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2 mx-auto"
                        >
                          <Shield className="h-4 w-4" />
                          <span>Check Permissions</span>
                        </button>
                        <p className="mt-3 text-sm text-gray-500">
                          We'll verify that Permutive has access to your bucket
                        </p>
                      </div>
                    )}

                    {iamStatus === 'checking' && (
                      <div className="text-center">
                        <div className="flex items-center justify-center space-x-3 mb-4">
                          <Loader2 className="animate-spin h-6 w-6 text-blue-600" />
                          <span className="text-gray-700 font-medium">Checking permissions...</span>
                        </div>
                        <p className="text-sm text-gray-500">
                          This may take a few seconds while we verify access to gs://{gcsConfig.bucketName}/{gcsConfig.schemaPrefix}
                        </p>
                      </div>
                    )}

                    {iamStatus === 'valid' && (
                      <div className="text-center">
                        <div className="flex items-center justify-center space-x-2 text-green-700 mb-4">
                          <CheckCircle className="h-6 w-6" />
                          <span className="font-medium text-lg">Permissions Verified!</span>
                        </div>
                        <p className="text-gray-600 mb-6">
                          Permutive can successfully access your GCS bucket and schema prefix.
                        </p>
                        <button
                          onClick={() => {
                            setCurrentStep(3);
                            setMaxStepReached(Math.max(maxStepReached, 3));
                          }}
                          className="px-8 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2 mx-auto"
                        >
                          <span>Discover Tables</span>
                          <ArrowRight className="h-4 w-4" />
                        </button>
                      </div>
                    )}

                    {iamStatus === 'invalid' && (
                      <div className="text-center">
                        <div className="flex items-center justify-center space-x-2 text-red-700 mb-4">
                          <AlertTriangle className="h-6 w-6" />
                          <span className="font-medium text-lg">Permission Error</span>
                        </div>
                        <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6 text-left">
                          <p className="text-red-800 font-medium mb-2">Missing Permissions</p>
                          <p className="text-red-700 text-sm mb-3">
                            Permutive cannot access your GCS bucket. Please ensure the following:
                          </p>
                          <ol className="text-red-700 text-sm space-y-1 ml-4">
                            <li>1. Add <code>connection@permutive.com</code> to your bucket's IAM</li>
                            <li>2. Grant <code>roles/storage.objectViewer</code> role</li>
                            <li>3. Grant <code>roles/storage.bucketViewer</code> role</li>
                          </ol>
                        </div>
                        <div className="flex justify-center space-x-3">
                          <button
                            onClick={checkIamPermissions}
                            className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                          >
                            Retry Check
                          </button>
                          <button
                            onClick={() => {
                              setCurrentStep(1);
                              setIamStatus('unchecked');
                            }}
                            className="px-6 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300"
                          >
                            Back to Config
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}

            {/* Step 3: GCS Structure Discovery */}
            {currentStep === 3 && (
              <div className="h-full p-8">
                <div className="max-w-5xl mx-auto">
                  <div className="mb-8">
                    <h2 className="text-2xl font-bold text-gray-900 mb-2">Discovered GCS Structure</h2>
                    <p className="text-gray-600">
                      Review the tables and data we found in your bucket schema
                    </p>
                  </div>

                  {/* Discovery Status */}
                  {!discoveredStructure && (
                    <div className="text-center py-12">
                      <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <Loader2 className="animate-spin h-8 w-8 text-blue-600" />
                      </div>
                      <h3 className="text-lg font-medium text-gray-900 mb-2">Scanning Bucket Structure</h3>
                      <p className="text-gray-600">
                        Analyzing gs://{gcsConfig.bucketName}/{gcsConfig.schemaPrefix}/ for tables...
                      </p>
                    </div>
                  )}

                  {/* Discovered Structure */}
                  {discoveredStructure && (
                    <div className="space-y-6">
                      {/* Schema Summary */}
                      <div className="bg-white rounded-xl border border-gray-200 p-6">
                        <div className="flex items-center space-x-3 mb-4">
                          <Database className="h-6 w-6 text-blue-600" />
                          <h3 className="text-lg font-semibold text-gray-900">Schema: {discoveredStructure.schemaPrefix}</h3>
                        </div>
                        <div className="grid grid-cols-3 gap-4 text-sm">
                          <div>
                            <span className="text-gray-600">Tables Found:</span>
                            <span className="ml-2 font-medium">{discoveredStructure.discoveredTables.length}</span>
                          </div>
                          <div>
                            <span className="text-gray-600">Format:</span>
                            <span className="ml-2 font-medium capitalize">{gcsConfig.dataFormat}</span>
                          </div>
                          <div>
                            <span className="text-gray-600">Partitioning:</span>
                            <span className="ml-2 font-medium">
                              {gcsConfig.dataPartitioning === 'all-partitioned' ? 'Enabled' : 'Disabled'}
                            </span>
                          </div>
                        </div>
                      </div>

                      {/* Discovered Tables */}
                      <div className="space-y-4">
                        <h3 className="text-lg font-semibold text-gray-900">Available Tables</h3>
                        {discoveredStructure.discoveredTables.map((table: any, index: number) => (
                          <div 
                            key={index}
                            className="bg-white rounded-lg border border-gray-200 p-6 hover:border-blue-500 hover:shadow-md transition-all cursor-pointer"
                            onClick={() => handleTableSelect(table)}
                          >
                            <div className="flex items-start justify-between mb-4">
                              <div className="flex-1">
                                <div className="flex items-center space-x-3 mb-2">
                                  <Table className="h-5 w-5 text-blue-600" />
                                  <h4 className="text-lg font-semibold text-gray-900">{table.name}</h4>
                                  {table.isPartitioned && (
                                    <span className="px-2 py-1 bg-green-100 text-green-700 text-xs rounded-full">
                                      Partitioned
                                    </span>
                                  )}
                                  <span className="px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full uppercase">
                                    {table.dataFormat}
                                  </span>
                                </div>
                                <p className="text-gray-600 text-sm mb-3">{table.path}</p>
                                
                                {/* Table Stats */}
                                <div className="flex items-center space-x-6 text-sm text-gray-500">
                                  <div className="flex items-center space-x-1">
                                    <FileText className="h-4 w-4" />
                                    <span>{table.fileCount} files</span>
                                  </div>
                                  <div className="flex items-center space-x-1">
                                    <Hash className="h-4 w-4" />
                                    <span>{table.sampleColumns.length} columns</span>
                                  </div>
                                  {table.partitions.length > 0 && (
                                    <div className="flex items-center space-x-1">
                                      <Calendar className="h-4 w-4" />
                                      <span>{table.partitions.length} partitions</span>
                                    </div>
                                  )}
                                </div>
                              </div>
                              <ChevronRight className="h-5 w-5 text-gray-400" />
                            </div>

                            {/* Sample Columns Preview */}
                            <div className="border-t border-gray-100 pt-4">
                              <h5 className="font-medium text-gray-900 text-sm mb-2">Sample Columns</h5>
                              <div className="grid grid-cols-2 gap-3">
                                {table.sampleColumns.slice(0, 4).map((col: any, colIndex: number) => (
                                  <div key={colIndex} className="flex justify-between items-center text-xs">
                                    <span className="font-medium text-gray-900">{col.name}</span>
                                    <span className="text-gray-500 uppercase">{col.type}</span>
                                  </div>
                                ))}
                              </div>
                              {table.sampleColumns.length > 4 && (
                                <p className="text-xs text-gray-500 mt-2">
                                  +{table.sampleColumns.length - 4} more columns
                                </p>
                              )}
                            </div>

                            {/* Partitions Preview */}
                            {table.partitions.length > 0 && (
                              <div className="border-t border-gray-100 pt-4 mt-4">
                                <h5 className="font-medium text-gray-900 text-sm mb-2">Recent Partitions</h5>
                                <div className="flex flex-wrap gap-2">
                                  {table.partitions.slice(0, 3).map((partition: string, pIndex: number) => (
                                    <code key={pIndex} className="px-2 py-1 bg-gray-50 text-gray-700 text-xs rounded">
                                      {partition}
                                    </code>
                                  ))}
                                  {table.partitions.length > 3 && (
                                    <span className="text-xs text-gray-500">
                                      +{table.partitions.length - 3} more
                                    </span>
                                  )}
                                </div>
                              </div>
                            )}

                            {/* Intelligence Suggestions */}
                            {intelligenceMode && (
                              <div className="border-t border-gray-100 pt-4 mt-4">
                                <div className="flex items-center space-x-2 text-sm">
                                  <Brain className="h-4 w-4 text-purple-600" />
                                  <span className="text-purple-700 font-medium">AI Analysis:</span>
                                  <span className="text-gray-600">
                                    {table.name === 'user_events' && 'Suitable for event tracking data'}
                                    {table.name === 'user_profiles' && 'Suitable for user profile data'}
                                  </span>
                                </div>
                              </div>
                            )}
                          </div>
                        ))}
                      </div>

                      {/* Action Buttons */}
                      <div className="flex justify-between pt-6">
                        <button
                          onClick={() => {
                            setDiscoveredStructure(null);
                            setCurrentStep(2);
                            setIamStatus('unchecked');
                          }}
                          className="px-6 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 flex items-center space-x-2"
                        >
                          <ArrowLeft className="h-4 w-4" />
                          <span>Back to Permissions</span>
                        </button>
                        
                        <div className="text-sm text-gray-500 self-center">
                          Click on a table to proceed with column mapping
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Step 4: Smart Column Mapping */}
            {currentStep === 4 && selectedTable && (
              <div className="h-full p-8 overflow-y-auto">
                <div className="max-w-5xl mx-auto">
                  {/* Header */}
                  <div className="mb-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <h2 className="text-xl font-bold text-gray-900">Map Your Columns</h2>
                        <p className="text-gray-600 text-sm mt-1">
                          AI has suggested mappings for <strong>{selectedTable.name}</strong>. Review and adjust as needed.
                        </p>
                      </div>
                      
                      <div className="flex items-center space-x-2">
                        <Brain className="h-4 w-4 text-purple-600" />
                        <span className="text-sm font-medium text-gray-700">Smart Mapping</span>
                        <button
                          onClick={() => setIntelligenceMode(!intelligenceMode)}
                          className={`px-2 py-1 rounded text-sm font-medium transition-colors ${
                            intelligenceMode ? 'bg-purple-600 text-white' : 'bg-gray-200 text-gray-700'
                          }`}
                        >
                          {intelligenceMode ? 'ON' : 'OFF'}
                        </button>
                      </div>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-8">
                    {/* Source Section */}
                    <div className="bg-white rounded-lg border border-gray-200 p-5">
                      <div className="flex items-center justify-between mb-4">
                        <div>
                          <h3 className="font-medium text-gray-900">Source: {selectedTable.name}</h3>
                          <div className="flex items-center space-x-2 mt-1">
                            <span className="px-2 py-0.5 bg-blue-100 text-blue-700 text-xs rounded uppercase font-medium">
                              {selectedTable.dataFormat}
                            </span>
                          </div>
                        </div>
                        <div className="text-right text-sm text-gray-500">
                          <div className="font-medium">{Object.values(columnMappings).filter(v => v).length} mapped</div>
                          <div>{selectedTable.sampleColumns.length} total</div>
                        </div>
                      </div>
                      
                      <div className="space-y-3">
                        {selectedTable.sampleColumns.map((column: any, index: number) => (
                          <div key={index} className="bg-gray-50 rounded-lg p-3 border border-gray-100">
                            <div className="flex items-center justify-between">
                              <div className="flex-1">
                                <div className="font-medium text-gray-900">{column.name}</div>
                                <div className="text-xs text-gray-500 uppercase font-mono mt-0.5">{column.type}</div>
                                <div className="text-xs text-gray-600 mt-1">
                                  Sample: <code className="bg-gray-200 px-1 rounded">{column.sample}</code>
                                </div>
                              </div>
                              
                              {columnMappings[column.name] && (
                                <div className="ml-3 text-right">
                                  <div className="flex items-center space-x-1">
                                    <ArrowRight className="h-3 w-3 text-gray-400" />
                                    <span className="text-xs font-medium text-purple-700">
                                      {columnMappings[column.name]}
                                    </span>
                                    {permutiveFields.find(f => f.field === columnMappings[column.name])?.required && (
                                      <span className="text-xs text-red-600">(Required)</span>
                                    )}
                                  </div>
                                </div>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>

                    {/* Permutive Schema Section */}
                    <div className="bg-white rounded-lg border border-gray-200 p-5">
                      <div className="flex items-center space-x-2 mb-4">
                        <Shield className="h-5 w-5 text-purple-600" />
                        <h3 className="font-medium text-gray-900">Permutive Schema</h3>
                        <span className="px-2 py-0.5 bg-purple-100 text-purple-700 text-xs rounded font-medium">
                          Standard Fields
                        </span>
                      </div>

                      <div className="space-y-3">
                        {selectedTable.sampleColumns.map((column: any, index: number) => {
                          const mappedField = columnMappings[column.name];
                          const permutiveField = permutiveFields.find(f => f.field === mappedField);
                          
                          return (
                            <div key={index} className="space-y-2">
                              <div className="flex items-center justify-between">
                                <div>
                                  <div className="font-medium text-gray-900">
                                    {mappedField || column.name}
                                  </div>
                                  {mappedField && permutiveField && (
                                    <div className="text-xs text-gray-500 mt-0.5">
                                      {permutiveField.description}
                                    </div>
                                  )}
                                </div>
                                <div className="flex items-center space-x-2">
                                  {mappedField && (
                                    <ArrowRight className="h-3 w-3 text-gray-400" />
                                  )}
                                  {mappedField && (
                                    <span className="text-xs font-medium text-purple-700">
                                      {column.name}
                                    </span>
                                  )}
                                  {permutiveField?.required && (
                                    <span className="text-xs text-red-600 font-medium">(Required)</span>
                                  )}
                                  {intelligenceMode && mappingConfidence[column.name] && (
                                    <div className={`w-2 h-2 rounded-full ${
                                      mappingConfidence[column.name] > 80 ? 'bg-green-500' :
                                      mappingConfidence[column.name] > 60 ? 'bg-yellow-500' : 'bg-red-500'
                                    }`}></div>
                                  )}
                                </div>
                              </div>
                              
                              <select
                                value={columnMappings[column.name] || ''}
                                onChange={(e) => setColumnMappings({
                                  ...columnMappings,
                                  [column.name]: e.target.value
                                })}
                                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 text-sm"
                              >
                                <option value="">Select mapping...</option>
                                <optgroup label="Required">
                                  {permutiveFields.filter(f => f.required).map(field => (
                                    <option key={field.field} value={field.field}>
                                      {field.field} - {field.description}
                                    </option>
                                  ))}
                                </optgroup>
                                <optgroup label="Optional">
                                  {permutiveFields.filter(f => !f.required).map(field => (
                                    <option key={field.field} value={field.field}>
                                      {field.field} - {field.description}
                                    </option>
                                  ))}
                                </optgroup>
                              </select>
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  </div>

                  {/* Compact Summary */}
                  <div className="mt-6 bg-white rounded-lg border border-gray-200 p-4">
                    <div className="flex items-center justify-between">
                      <h3 className="font-medium text-gray-900">Mapping Summary</h3>
                      <div className="flex items-center space-x-6 text-sm">
                        <div className="flex items-center space-x-2">
                          <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                          <span className="font-medium text-blue-600">
                            {Object.values(columnMappings).filter(v => v).length}
                          </span>
                          <span className="text-gray-600">Fields Mapped</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                          <span className="font-medium text-green-600">
                            {Object.values(columnMappings).filter(v => 
                              permutiveFields.find(f => f.field === v)?.required
                            ).length}
                          </span>
                          <span className="text-gray-600">Required Fields</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
                          <span className="font-medium text-purple-600">
                            {intelligenceMode && Object.keys(mappingConfidence).length > 0 ? Math.round(
                              Object.values(mappingConfidence).reduce((acc: number, conf: any) => acc + conf, 0) / 
                              Object.values(mappingConfidence).length
                            ) : 'NaN'}%
                          </span>
                          <span className="text-gray-600">Avg. Confidence</span>
                        </div>
                      </div>
                    </div>

                    {/* Missing Fields Warning */}
                    {permutiveFields.filter(f => f.required).some(field => 
                      !Object.values(columnMappings).includes(field.field)
                    ) && (
                      <div className="mt-3 p-3 bg-yellow-50 rounded-lg border border-yellow-200">
                        <div className="flex items-center space-x-2">
                          <AlertTriangle className="h-4 w-4 text-yellow-600" />
                          <span className="text-sm text-yellow-800 font-medium">Missing Required Fields</span>
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Action Buttons */}
                  <div className="flex justify-between pt-6">
                    <button
                      onClick={() => setCurrentStep(3)}
                      className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 flex items-center space-x-2 text-sm"
                    >
                      <ArrowLeft className="h-4 w-4" />
                      <span>Back</span>
                    </button>

                    <button
                      onClick={() => {
                        setCurrentStep(5);
                        setMaxStepReached(Math.max(maxStepReached, 5));
                      }}
                      disabled={permutiveFields.filter(f => f.required).some(field => 
                        !Object.values(columnMappings).includes(field.field)
                      )}
                      className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2 text-sm font-medium"
                    >
                      <span>Review & Import</span>
                      <ArrowRight className="h-4 w-4" />
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* Step 5: Import Preview */}
            {currentStep === 5 && (
              <div className="p-8">
                <div className="max-w-5xl mx-auto">
                  <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-6">
                    <div className="flex items-center justify-between mb-6">
                      <div>
                        <h2 className="text-xl font-bold text-gray-900">Review & Validate</h2>
                        <p className="text-gray-600 text-sm mt-1">
                          {selectedTable?.name} • {Object.values(columnMappings).filter(v => v).length} fields mapped
                        </p>
                      </div>
                      <div className="text-right text-sm text-gray-500">
                        <div className="font-semibold">{selectedTable?.totalRecords?.toLocaleString() || '1,247,832'} records</div>
                        <div>~{selectedTable?.estimatedTime || '12'} min processing time</div>
                      </div>
                    </div>

                    {/* Validation Results */}
                    <div className="bg-gradient-to-r from-green-50 to-blue-50 rounded-lg p-4 mb-6">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
                            <CheckCircle className="h-6 w-6 text-green-600" />
                          </div>
                          <div>
                            <div className="font-medium text-gray-900">Validation Passed</div>
                            <div className="text-sm text-gray-600">All checks completed successfully</div>
                          </div>
                        </div>
                        <button className="text-sm text-blue-600 hover:text-blue-700 font-medium">
                          View Details →
                        </button>
                      </div>
                    </div>

                    {/* Validation Checks Grid */}
                    <div className="grid grid-cols-2 gap-4 mb-6">
                      {/* Schema Validation */}
                      <div className="border border-gray-200 rounded-lg p-4">
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex items-center space-x-2">
                            <FileCode className="h-5 w-5 text-blue-600" />
                            <h3 className="font-medium text-gray-900">Schema Validation</h3>
                          </div>
                          <span className="px-2 py-1 bg-green-100 text-green-700 text-xs font-medium rounded">Passed</span>
                        </div>
                        <div className="space-y-2 text-sm">
                          <div className="flex items-center justify-between">
                            <span className="text-gray-600">File Format</span>
                            <span className="font-medium text-gray-900">Parquet (ZSTD)</span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-gray-600">Schema Version</span>
                            <span className="font-medium text-gray-900">v2.1</span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-gray-600">Columns</span>
                            <span className="font-medium text-gray-900">8 of 8 valid</span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-gray-600">Partitioning</span>
                            <span className="font-medium text-gray-900">Hive-compatible</span>
                          </div>
                        </div>
                      </div>

                      {/* Data Quality Checks */}
                      <div className="border border-gray-200 rounded-lg p-4">
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex items-center space-x-2">
                            <Shield className="h-5 w-5 text-green-600" />
                            <h3 className="font-medium text-gray-900">Data Quality</h3>
                          </div>
                          <span className="px-2 py-1 bg-green-100 text-green-700 text-xs font-medium rounded">Healthy</span>
                        </div>
                        <div className="space-y-2 text-sm">
                          <div className="flex items-center justify-between">
                            <span className="text-gray-600">Null Values</span>
                            <span className="font-medium text-gray-900">0.3%</span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-gray-600">Duplicates</span>
                            <span className="font-medium text-gray-900">None detected</span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-gray-600">Type Consistency</span>
                            <span className="font-medium text-gray-900">100%</span>
                          </div>
                          <div className="flex items-center justify-between">
                            <span className="text-gray-600">Required Fields</span>
                            <span className="font-medium text-gray-900">All present</span>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Sample Data Preview */}
                    <div className="border border-gray-200 rounded-lg mb-6 overflow-hidden">
                      <div className="px-4 py-3 bg-gray-50 border-b border-gray-200 flex items-center justify-between">
                        <div className="flex items-center space-x-2">
                          <Eye className="h-4 w-4 text-gray-600" />
                          <h3 className="text-sm font-medium text-gray-900">Sample Data Preview</h3>
                        </div>
                        <div className="flex items-center space-x-2">
                          <span className="text-xs text-gray-500">Showing first 100 rows</span>
                          <button className="text-xs text-blue-600 hover:text-blue-700 font-medium">
                            Download Sample CSV
                          </button>
                        </div>
                      </div>
                      <div className="overflow-x-auto">
                        <table className="min-w-full divide-y divide-gray-200">
                          <thead className="bg-gray-50">
                            <tr>
                              <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">user_id</th>
                              <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">event_timestamp</th>
                              <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">event_name</th>
                              <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">geo_country</th>
                              <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">device_category</th>
                            </tr>
                          </thead>
                          <tbody className="bg-white divide-y divide-gray-200">
                            <tr className="hover:bg-gray-50">
                              <td className="px-4 py-2 text-xs text-gray-900 font-mono">usr_abc123xyz</td>
                              <td className="px-4 py-2 text-xs text-gray-600">2024-01-15 10:23:45</td>
                              <td className="px-4 py-2 text-xs text-gray-900">page_view</td>
                              <td className="px-4 py-2 text-xs text-gray-600">US</td>
                              <td className="px-4 py-2 text-xs text-gray-600">desktop</td>
                            </tr>
                            <tr className="hover:bg-gray-50">
                              <td className="px-4 py-2 text-xs text-gray-900 font-mono">usr_def456uvw</td>
                              <td className="px-4 py-2 text-xs text-gray-600">2024-01-15 10:24:12</td>
                              <td className="px-4 py-2 text-xs text-gray-900">click</td>
                              <td className="px-4 py-2 text-xs text-gray-600">GB</td>
                              <td className="px-4 py-2 text-xs text-gray-600">mobile</td>
                            </tr>
                            <tr className="hover:bg-gray-50">
                              <td className="px-4 py-2 text-xs text-gray-900 font-mono">usr_ghi789rst</td>
                              <td className="px-4 py-2 text-xs text-gray-600">2024-01-15 10:24:58</td>
                              <td className="px-4 py-2 text-xs text-gray-900">purchase</td>
                              <td className="px-4 py-2 text-xs text-gray-600">CA</td>
                              <td className="px-4 py-2 text-xs text-gray-600">tablet</td>
                            </tr>
                          </tbody>
                        </table>
                      </div>
                    </div>

                    {/* Data Statistics */}
                    <div className="grid grid-cols-4 gap-4 mb-6">
                      <div className="bg-gray-50 rounded-lg p-3">
                        <div className="text-xs text-gray-600 mb-1">Total Records</div>
                        <div className="text-lg font-bold text-gray-900">1.25M</div>
                        <div className="text-xs text-green-600">+12% from last sync</div>
                      </div>
                      <div className="bg-gray-50 rounded-lg p-3">
                        <div className="text-xs text-gray-600 mb-1">Data Size</div>
                        <div className="text-lg font-bold text-gray-900">2.3GB</div>
                        <div className="text-xs text-gray-500">Compressed</div>
                      </div>
                      <div className="bg-gray-50 rounded-lg p-3">
                        <div className="text-xs text-gray-600 mb-1">Time Range</div>
                        <div className="text-lg font-bold text-gray-900">30 days</div>
                        <div className="text-xs text-gray-500">Dec 15 - Jan 15</div>
                      </div>
                      <div className="bg-gray-50 rounded-lg p-3">
                        <div className="text-xs text-gray-600 mb-1">Unique Users</div>
                        <div className="text-lg font-bold text-gray-900">847K</div>
                        <div className="text-xs text-gray-500">Active in period</div>
                      </div>
                    </div>

                    {/* Action Buttons */}
                    <div className="flex justify-between">
                      <button
                        onClick={() => setCurrentStep(4)}
                        className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 flex items-center space-x-2 text-sm"
                      >
                        <ArrowLeft className="h-4 w-4" />
                        <span>Back</span>
                      </button>
                      
                      <button
                        onClick={() => {
                          setIsProcessing(true);
                          setTimeout(() => {
                            setIsProcessing(false);
                            setIngestionStarted(true);
                            setCurrentStep(6);
                          }, 3000);
                        }}
                        className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center space-x-2 text-sm font-medium"
                      >
                        <PlayCircle className="h-4 w-4" />
                        <span>Start Import</span>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Step 6: Data Ingestion Complete */}
            {currentStep === 6 && (
              <div className="h-full flex items-center justify-center p-8">
                <div className="max-w-2xl mx-auto text-center">
                  <div className="bg-white rounded-xl shadow-lg border border-gray-200 p-8">
                    <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
                      <TrendingUp className="h-8 w-8 text-green-600" />
                    </div>
                    <h2 className="text-2xl font-bold text-gray-900 mb-4">Data Ingestion Started</h2>
                    <p className="text-gray-600 mb-8">
                      Your data is now being imported into the Permutive platform
                    </p>
                    
                    <div className="bg-green-50 rounded-lg p-6 mb-8">
                      <div className="flex items-center justify-center space-x-2 text-green-700 mb-4">
                        <CheckCircle className="h-6 w-6" />
                        <span className="font-semibold text-lg">Integration Complete!</span>
                      </div>
                      <p className="text-green-600">
                        Your {selectedTable?.name} table is now connected and data is flowing into Permutive.
                      </p>
                    </div>
                    
                    <div className="grid grid-cols-3 gap-4 mb-8">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-blue-600 mb-1">2.3GB</div>
                        <div className="text-sm text-gray-600">Data Size</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-green-600 mb-1">Active</div>
                        <div className="text-sm text-gray-600">Status</div>
                      </div>
                      <div className="text-center">
                        <div className="text-2xl font-bold text-purple-600 mb-1">{Object.values(columnMappings).filter(v => v).length}</div>
                        <div className="text-sm text-gray-600">Fields Mapped</div>
                      </div>
                    </div>
                    
                    <button
                      onClick={() => {
                        setCurrentStep(0);
                        setWizardSubStep(1);
                        setSelectedTable(null);
                        setSelectedDataSource(null);
                        setIsAuthenticated(false);
                      }}
                      className="px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                    >
                      Create Another Connection
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Loading Overlay */}
      {isProcessing && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 flex items-center space-x-3">
            <Loader2 className="animate-spin h-6 w-6 text-blue-600" />
            <span className="text-gray-700">Processing...</span>
          </div>
        </div>
      )}
    </div>
  );
}